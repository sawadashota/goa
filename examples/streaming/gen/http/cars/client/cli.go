// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// cars HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package client

import (
	"encoding/json"
	"fmt"

	carssvc "goa.design/goa/examples/streaming/gen/cars"
)

// BuildLoginPayload builds the payload for the cars login endpoint from CLI
// flags.
func BuildLoginPayload(carsLoginUser string, carsLoginPassword string) (*carssvc.LoginPayload, error) {
	var user string
	{
		user = carsLoginUser
	}
	var password string
	{
		password = carsLoginPassword
	}
	payload := &carssvc.LoginPayload{
		User:     user,
		Password: password,
	}
	return payload, nil
}

// BuildListPayload builds the payload for the cars list endpoint from CLI
// flags.
func BuildListPayload(carsListStyle string, carsListToken string) (*carssvc.ListPayload, error) {
	var style string
	{
		style = carsListStyle
	}
	var token string
	{
		token = carsListToken
	}
	payload := &carssvc.ListPayload{
		Style: style,
		Token: token,
	}
	return payload, nil
}

// BuildAddPayload builds the payload for the cars add endpoint from CLI flags.
func BuildAddPayload(carsAddBody string, carsAddToken string) (*carssvc.AddPayload, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(carsAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"car\": {\n         \"body_style\": \"Laudantium qui minima voluptatibus in incidunt.\",\n         \"make\": \"Aspernatur totam.\",\n         \"model\": \"Vero odio odio id autem.\"\n      }\n   }'")
		}
	}
	var token *string
	{
		if carsAddToken != "" {
			token = &carsAddToken
		}
	}
	if err != nil {
		return nil, err
	}
	v := &carssvc.AddPayload{}
	if body.Car != nil {
		v.Car = marshalCarRequestBodyToCar(body.Car)
	}
	v.Token = token
	return v, nil
}
