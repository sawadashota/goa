// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// cars service
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package carssvc

import (
	"context"

	carssvcviews "goa.design/goa/examples/streaming/gen/cars/views"
)

// The cars service lists car models by body style.
type Service interface {
	// Creates a valid JWT
	Login(context.Context, *LoginPayload) (res string, err error)
	// Lists car models by body style.
	List(context.Context, *ListPayload, ListServerStream) (err error)
	// Add car models.
	Add(context.Context, AddServerStream) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "cars"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"login", "list", "add"}

// ListServerStream is the interface a "list" endpoint server stream must
// satisfy.
type ListServerStream interface {
	// Send streams instances of "Car".
	Send(*Car) error
	// Close closes the stream.
	Close() error
	// SetView sets the view used to render the result before streaming.
	SetView(view string)
}

// ListClientStream is the interface a "list" endpoint client stream must
// satisfy.
type ListClientStream interface {
	// Recv reads instances of "Car" from the stream.
	Recv() (*Car, error)
}

// AddServerStream is the interface a "add" endpoint server stream must satisfy.
type AddServerStream interface {
	// Recv reads instances of "AddPayload" from the stream.
	Recv() (*AddPayload, error)
	// Send streams instances of "CarCollection" and closes the stream.
	SendAndClose(CarCollection) error
}

// AddClientStream is the interface a "add" endpoint client stream must satisfy.
type AddClientStream interface {
	// Send streams instances of "AddPayload".
	Send(*AddPayload) error
	// CloseAndRecv sends an EOF message to the stream and reads instances of
	// "CarCollection" from the stream.
	CloseAndRecv() (CarCollection, error)
}

// Credentials used to authenticate to retrieve JWT token
type LoginPayload struct {
	User     string
	Password string
}

// ListPayload is the payload type of the cars service list method.
type ListPayload struct {
	// The car body style.
	Style string
	// JWT used for authentication
	Token string
}

// Car is the result type of the cars service list method.
type Car struct {
	// The make of the car
	Make string
	// The car model
	Model string
	// The car body style
	BodyStyle string
}

// AddPayload is the payload type of the cars service add method.
type AddPayload struct {
	// Car to add.
	Car *Car
	// JWT used for authentication
	Token *string
}

// CarCollection is the result type of the cars service add method.
type CarCollection []*Car

// Credentials are invalid
type Unauthorized string

type InvalidScopes string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
func (e Unauthorized) ErrorName() string {
	return "unauthorized"
}

// Error returns an error description.
func (e InvalidScopes) Error() string {
	return ""
}

// ErrorName returns "invalid-scopes".
func (e InvalidScopes) ErrorName() string {
	return "invalid-scopes"
}

// NewCar initializes result type Car from viewed result type Car.
func NewCar(vres *carssvcviews.Car) *Car {
	var res *Car
	switch vres.View {
	case "default", "":
		res = newCar(vres.Projected)
	}
	return res
}

// NewViewedCar initializes viewed result type Car from result type Car using
// the given view.
func NewViewedCar(res *Car, view string) *carssvcviews.Car {
	var vres *carssvcviews.Car
	switch view {
	case "default", "":
		p := newCarView(res)
		vres = &carssvcviews.Car{p, "default"}
	}
	return vres
}

// NewCarCollection initializes result type CarCollection from viewed result
// type CarCollection.
func NewCarCollection(vres carssvcviews.CarCollection) CarCollection {
	var res CarCollection
	switch vres.View {
	case "default", "":
		res = newCarCollection(vres.Projected)
	}
	return res
}

// NewViewedCarCollection initializes viewed result type CarCollection from
// result type CarCollection using the given view.
func NewViewedCarCollection(res CarCollection, view string) carssvcviews.CarCollection {
	var vres carssvcviews.CarCollection
	switch view {
	case "default", "":
		p := newCarCollectionView(res)
		vres = carssvcviews.CarCollection{p, "default"}
	}
	return vres
}

// newCar converts projected type Car to service type Car.
func newCar(vres *carssvcviews.CarView) *Car {
	res := &Car{}
	if vres.Make != nil {
		res.Make = *vres.Make
	}
	if vres.Model != nil {
		res.Model = *vres.Model
	}
	if vres.BodyStyle != nil {
		res.BodyStyle = *vres.BodyStyle
	}
	return res
}

// newCarView projects result type Car into projected type CarView using the
// "default" view.
func newCarView(res *Car) *carssvcviews.CarView {
	vres := &carssvcviews.CarView{
		Make:      &res.Make,
		Model:     &res.Model,
		BodyStyle: &res.BodyStyle,
	}
	return vres
}

// newCarCollection converts projected type CarCollection to service type
// CarCollection.
func newCarCollection(vres carssvcviews.CarCollectionView) CarCollection {
	res := make(CarCollection, len(vres))
	for i, n := range vres {
		res[i] = newCar(n)
	}
	return res
}

// newCarCollectionView projects result type CarCollection into projected type
// CarCollectionView using the "default" view.
func newCarCollectionView(res CarCollection) carssvcviews.CarCollectionView {
	vres := make(carssvcviews.CarCollectionView, len(res))
	for i, n := range res {
		vres[i] = newCarView(n)
	}
	return vres
}
