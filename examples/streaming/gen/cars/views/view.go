// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// cars views
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package views

import (
	goa "goa.design/goa"
)

// Car is the viewed result type that is projected based on a view.
type Car struct {
	// Type to project
	Projected *CarView
	// View to render
	View string
}

// CarCollection is the viewed result type that is projected based on a view.
type CarCollection struct {
	// Type to project
	Projected CarCollectionView
	// View to render
	View string
}

// CarView is a type that runs validations on a projected type.
type CarView struct {
	// The make of the car
	Make *string
	// The car model
	Model *string
	// The car body style
	BodyStyle *string
}

// CarCollectionView is a type that runs validations on a projected type.
type CarCollectionView []*CarView

// Validate runs the validations defined on the viewed result type Car.
func (result *Car) Validate() (err error) {
	switch result.View {
	case "default", "":
		err = result.Projected.Validate()
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// Validate runs the validations defined on the viewed result type
// CarCollection.
func (result CarCollection) Validate() (err error) {
	switch result.View {
	case "default", "":
		err = result.Projected.Validate()
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// Validate runs the validations defined on CarView using the "default" view.
func (result *CarView) Validate() (err error) {
	if result.Make == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("make", "result"))
	}
	if result.Model == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("model", "result"))
	}
	if result.BodyStyle == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body_style", "result"))
	}
	return
}

// Validate runs the validations defined on CarCollectionView using the
// "default" view.
func (result CarCollectionView) Validate() (err error) {
	for _, item := range result {
		if err2 := item.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
